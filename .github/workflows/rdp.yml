name: Windows RDP via Ngrok

on: [push]

jobs:
  rdp-setup:
    runs-on: windows-latest
    timeout-minutes: 360  # 6 hour max (GitHub Free limit)

    steps:
    - name: Download and extract Ngrok
      run: |
        Invoke-WebRequest "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-windows-amd64.zip" -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath .
        Remove-Item ngrok.zip -Force

    - name: Authenticate Ngrok
      run: .\ngrok.exe authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        New-NetFirewallRule -DisplayName "Allow RDP via Ngrok" -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3389

    - name: Create RDP User
      run: |
        net user kamel007 kamel007 /add /Y
        net localgroup administrators kamel007 /add
        reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList" /v kamel007 /t REG_DWORD /d 0 /f

    - name: Start Ngrok and display connection info
      run: |
        # Start Ngrok and capture output
        Start-Process -FilePath "$pwd\ngrok.exe" -ArgumentList "tcp 3389 --log=stdout" -NoNewWindow -RedirectStandardOutput ngrok.log
        
        # Wait for tunnel establishment
        $timeout = 60
        $tunnelUrl = $null
        
        while ($timeout -gt 0 -and -not $tunnelUrl) {
          Start-Sleep -Seconds 5
          $timeout -= 5
          
          # Try API first
          try {
            $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -ErrorAction Stop
            $tunnelUrl = $response.tunnels[0].public_url -replace "tcp://", ""
          } catch {
            # Fallback to log parsing
            $logContent = Get-Content ngrok.log -ErrorAction SilentlyContinue
            $tunnelUrl = $logContent | Select-String -Pattern "tcp://([a-zA-Z0-9\.\-]+:\d+)" | ForEach-Object { $_.Matches.Groups[1].Value }
          }
        }

        if (-not $tunnelUrl) {
          Write-Output "::error::Failed to establish Ngrok tunnel after 60 seconds"
          Write-Output "=== Ngrok Log Contents ==="
          Get-Content ngrok.log
          exit 1
        }

        Write-Output "=========================================="
        Write-Output "||        RDP CONNECTION DETAILS        ||"
        Write-Output "=========================================="
        Write-Output "Address: $tunnelUrl"
        Write-Output "Username: kamel007"
        Write-Output "Password: kamel007"
        Write-Output "------------------------------------------"
        Write-Output "1. Open Remote Desktop (Win+R â†’ mstsc)"
        Write-Output "2. Connect to: $tunnelUrl"
        Write-Output "3. Use credentials above when prompted"
        Write-Output "=========================================="
        Write-Output "Note: This VM will self-destruct after 6 hours"
        Write-Output "=========================================="

        # Keep alive
        while ($true) { Start-Sleep -Seconds 300 }

    - name: Force cleanup
      if: always()
      run: |
        Stop-Process -Name "ngrok" -Force -ErrorAction SilentlyContinue
        Stop-Process -Name "rdp" -Force -ErrorAction SilentlyContinue
